- add statics to load_intro
- change primitive to plane in update_static()
- implement task system and finish occlussion system
	- finish arranging the scene
	- decide what the occlusion tree will look like
		-
	- create one occlusion group with all the objects in it
	- create multiple occlusion groups
	- implement task system data structure (ds_list of task objects, each object has two ds_lists, one for variables other for scripts)
	- rewrite load_intro into separate, reusable scripts
	- rewrite load_intro as sub-task ds_list
- implement occlusion generation as part of load_intro
	-
- implement back-referenced tags ???
- create_identity() with tag reference OR new tag (add another argument: an array of reffered tag indices, -1 meaning to create a new tag) (4 different object types: regular, omni_lights, spot_lights and mirrors)
- add timestamp to log() script

-----------------------------------------------
Pre-Production
  Renderer----------------------------ETA June 2019
	-create test scene
    -frustrum culling
	-lod
    -uniform buffers
    -animation
	-mirrors

	-omni lights
	-shadow casting spot lights

	-post process
		-edge detection
---------------------
    -software renderer?
    -splitscreen
    -task system
		-spatial hierarchy (contains locations, content groups and objects) (locations can contain content groups and objects, content groups can contain objects)

  Level Generator w/ Designer AI
  Simulator
  Gameplay
  Design Check Program ???
-----------------------------------------------
Production
                        Art   |   Music   | Gameplay
Office              |
Suburb              |
Cruise Ship         |
Mountain Resort     |
City                |
Mansion             |
Fashion DLC			|

Testing

-----------------------------------------------
Marketing
